function benchmark_matlab()
%BENCHMARK_MATLAB Benchmark StabLab.jl against MATLAB AllanLab
% Tests: hdev, mdev, adev with large datasets (5e6 samples)

fprintf('StabLab.jl vs MATLAB AllanLab Benchmark\n');
fprintf('========================================\n\n');

% Add AllanLab to path
addpath('/Users/ianlapinski/Desktop/masterclock-kflab/matlab/AllanLab');

% Load test data generated by Python
try
    fprintf('Loading test data...\n');
    phase_data = readNPY('/tmp/benchmark_phase_data.npy');
    tau0 = 1.0;
    N = length(phase_data);
    fprintf('Loaded %d samples of phase data\n', N);
    fprintf('Data range: [%.2e, %.2e]\n', min(phase_data), max(phase_data));
    fprintf('Sampling interval: %.1f seconds\n\n', tau0);
catch ME
    fprintf('Error loading test data: %s\n', ME.message);
    fprintf('Make sure to run the Python script first.\n');
    return;
end

% Generate m_list (octave-spaced) - matching Python/Julia
max_tau_points = 20;
max_m = floor(N / 4);
m_list = [];
m = 1;
while m <= max_m && length(m_list) < max_tau_points
    m_list = [m_list, m];
    m = m * 2;
end

fprintf('=== MATLAB AllanLab Benchmark ===\n');
results = struct();

% Test ADEV
fprintf('Testing ADEV with %d samples...\n', N);
tic;
try
    [tau_adev, adev_vals, edf_adev, ci_adev, alpha_adev] = allanlab.adev(phase_data, tau0, m_list);
    adev_time = toc;
    results.adev.tau = tau_adev;
    results.adev.deviation = adev_vals;
    results.adev.time = adev_time;
    fprintf('  ✓ ADEV: %d points in %.3fs\n', length(tau_adev), adev_time);
catch ME
    fprintf('  ❌ ADEV failed: %s\n', ME.message);
end

% Test MDEV
fprintf('Testing MDEV with %d samples...\n', N);
tic;
try
    [tau_mdev, mdev_vals, edf_mdev, ci_mdev, alpha_mdev] = allanlab.mdev(phase_data, tau0, m_list);
    mdev_time = toc;
    results.mdev.tau = tau_mdev;
    results.mdev.deviation = mdev_vals;
    results.mdev.time = mdev_time;
    fprintf('  ✓ MDEV: %d points in %.3fs\n', length(tau_mdev), mdev_time);
catch ME
    fprintf('  ❌ MDEV failed: %s\n', ME.message);
end

% Test HDEV
fprintf('Testing HDEV with %d samples...\n', N);
tic;
try
    [tau_hdev, hdev_vals, edf_hdev, ci_hdev, alpha_hdev] = allanlab.hdev(phase_data, tau0, m_list);
    hdev_time = toc;
    results.hdev.tau = tau_hdev;
    results.hdev.deviation = hdev_vals;
    results.hdev.time = hdev_time;
    fprintf('  ✓ HDEV: %d points in %.3fs\n', length(tau_hdev), hdev_time);
catch ME
    fprintf('  ❌ HDEV failed: %s\n', ME.message);
end

% Save results for comparison
save('/tmp/matlab_results.mat', 'results');
fprintf('\nResults saved to /tmp/matlab_results.mat\n');

% Summary
fprintf('\n=== MATLAB Summary ===\n');
functions = {'adev', 'mdev', 'hdev'};
total_time = 0;

for i = 1:length(functions)
    func_name = functions{i};
    if isfield(results, func_name)
        func_result = results.(func_name);
        total_time = total_time + func_result.time;
        fprintf('  %s: %d points, %.3fs\n', upper(func_name), length(func_result.tau), func_result.time);
        if length(func_result.deviation) > 0
            fprintf('    First value: %.6e\n', func_result.deviation(1));
        end
    end
end

fprintf('Total computation time: %.3fs\n', total_time);

fprintf('\n🎉 MATLAB benchmark completed!\n');
fprintf('Run benchmark_comparison.jl to compare all three implementations.\n');

end

% Helper function to read NPY files (simplified)
function data = readNPY(filename)
    % Simple NPY reader for our use case
    fid = fopen(filename, 'r', 'ieee-le');
    if fid == -1
        error('Cannot open file: %s', filename);
    end
    
    % Skip NPY header (simplified - assumes our specific format)
    magic = fread(fid, 6, 'uint8');
    version = fread(fid, 2, 'uint8');
    header_len = fread(fid, 2, 'uint16');
    header = fread(fid, header_len, 'char');
    
    % Read data as double precision
    data = fread(fid, inf, 'double');
    fclose(fid);
end